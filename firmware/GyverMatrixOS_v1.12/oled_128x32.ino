#if (USE_OLED == 1)

// Dependency https://github.com/ThingPulse/esp8266-oled-ssd1306
// Include the correct display library
// For a connection via I2C using Wire include
#include <Wire.h>  // Only needed for Arduino 1.6.5 and earlier
#include "SSD1306Wire.h"


//Node MCU
// D2 -> SDA
// D1 -> SCL
// D5 -> SDA
// D6 -> SCL

SSD1306Wire  display(0x3c, D5, D6, GEOMETRY_128_32);

// Generated here https://www.online-utility.org/image/convert/to/XBM
const unsigned char img1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 
  0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 
  0x00, 0x3E, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 
  0x80, 0xFF, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0xC0, 0xF7, 0x01, 0x00, 
  0xC0, 0xFF, 0x01, 0x00, 0x80, 0xDD, 0x00, 0x00, 0xE0, 0xFF, 0x03, 0x00, 
  0xC0, 0xF7, 0x03, 0x00, 0xE0, 0xFF, 0x03, 0x00, 0xF0, 0xDD, 0x07, 0x00, 
  0xF0, 0xBD, 0x07, 0x00, 0xF0, 0xFF, 0x07, 0x00, 0xF8, 0xFF, 0x0F, 0x00, 
  0x3C, 0xF7, 0x1E, 0x00, 0xF8, 0xFF, 0x0F, 0x00, 0xFE, 0xFF, 0x3F, 0x00, 
  0xEC, 0x9D, 0x1B, 0x00, 0xEC, 0xFD, 0x3B, 0x00, 0xFE, 0xFF, 0x3F, 0x00, 
  0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x1C, 0x00, 0x00 };

const unsigned char img2[] PROGMEM = {
  0x83, 0xC1, 0x07, 0x06, 0x83, 0xF1, 0x1F, 0x06, 0x83, 0x39, 0x38, 0x06, 
  0x83, 0x19, 0x70, 0x06, 0x83, 0x0D, 0x60, 0x06, 0xFF, 0x0D, 0x60, 0x06, 
  0xFF, 0x0D, 0x60, 0x06, 0x83, 0x0D, 0x60, 0x06, 0x83, 0x19, 0x70, 0x06, 
  0x83, 0x39, 0x38, 0x00, 0x83, 0xF1, 0x1F, 0x06, 0x83, 0xC1, 0x07, 0x06 };


  
String MODES_TEXTS[] = {
  "Red",
  "Rainbow text",
  "RGB",
  "Madness",
  "Cloud",
  "Lava",
  "Plasma",
  "Rainbow noise",
  "Rainbow stripe",
  "Zebra",
  "Forest",
  "Ocean",
  "Snow",
  "Sparkles",
  "Matrix",
  "Starfall",
  "Ball",
  "Balls",
  "Rainbow",
  "Rainbow diag",
  "Fire",
  "Snake",
  "Tetris",
  "Maze",
  "Runner",
  "Flappy bird",
  "Arkanoid",
  "Clock"
};

void setupOLED() {
  // Initialising the UI will init the display too.
  display.init();
  display.setBrightness(1);
  //display.flipScreenVertically();
  //display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.clear();
  delay(1000);
  display.drawXbm(0, 0, 25, 32, img1);
  display.display();
  delay(500);
  display.drawXbm(30, 4, 27, 12, img2);
  display.display();
  delay(1000);
  display.drawXbm(60, 15, 27, 12, img2);
  display.display();
  delay(1500);
  display.drawXbm(90, 7, 27, 12, img2);
  display.display();
  delay(2000);
  display.setFont(ArialMT_Plain_16);
  display.clear();
  display.drawString(0, 0, "Initialization");
  display.display();
}

void oledString(uint x, uint y, String text) {
  display.clear();
  display.drawString(x, y, text);
  display.display();
}

void oledRoutine() {
  if(loadingFlag) {
      char resultText[20];
      String modePosition = String(thisMode + 1) + ". ";
      String modeText = MODES_TEXTS[thisMode];
      oledString(0, 0, modePosition + modeText);
    }
}

#elif (USE_OLED == 0)
void oledRoutine() {
  return;
}
#endif
